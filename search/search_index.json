{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nano HTTP Request Component \u00b6 A robust, modular PHP library for handling HTTP requests, providing seamless access to superglobals ( $_GET , $_POST , $_FILES , etc.) with advanced features like nested file uploads and stream input processing. Key Features \u00b6 Unified Access : Retrieve query, form, file, cookie, session, and server data through a consistent interface. Nested File Handling : Supports nested $_FILES arrays with dot-notation access (e.g., user.documents ). Error Management : Detailed error detection and messaging for file uploads. Stream Input : Process raw request bodies (e.g., JSON) efficiently. Tested : Comprehensive test suite ensures reliability. Quickstart \u00b6 use Nano\\Http\\Request; $request = Request::initialize(); $file = $request->getFile('user.documents')->getAll()[0]; // Access nested file echo $file->getFileName(); Documentation \u00b6 Installation Usage API Reference Architecture Contributing Testing Changelog License \u00b6 MIT (assumed; update as needed)","title":"Home"},{"location":"#nano-http-request-component","text":"A robust, modular PHP library for handling HTTP requests, providing seamless access to superglobals ( $_GET , $_POST , $_FILES , etc.) with advanced features like nested file uploads and stream input processing.","title":"Nano HTTP Request Component"},{"location":"#key-features","text":"Unified Access : Retrieve query, form, file, cookie, session, and server data through a consistent interface. Nested File Handling : Supports nested $_FILES arrays with dot-notation access (e.g., user.documents ). Error Management : Detailed error detection and messaging for file uploads. Stream Input : Process raw request bodies (e.g., JSON) efficiently. Tested : Comprehensive test suite ensures reliability.","title":"Key Features"},{"location":"#quickstart","text":"use Nano\\Http\\Request; $request = Request::initialize(); $file = $request->getFile('user.documents')->getAll()[0]; // Access nested file echo $file->getFileName();","title":"Quickstart"},{"location":"#documentation","text":"Installation Usage API Reference Architecture Contributing Testing Changelog","title":"Documentation"},{"location":"#license","text":"MIT (assumed; update as needed)","title":"License"},{"location":"api-reference/","text":"API Reference \u00b6 Request \u00b6 __construct \u00b6 public function __construct(QueryParam $queryParam, FormParam $formParam, ServerParam $cookieParam, FileParam $fileParam, SessionParam $sessionParam, StreamInputService $streamInputService) - Injected with parameter objects and stream service. initialize \u00b6 public static function initialize(): self - Creates a Request with superglobals. - Returns: Request getFile(?string $fileName = null) \u00b6 public function getFile(?string $fileName = null): FileHandlerInterface - $fileName : Optional dot-notation field name (e.g., user.documents ). - Returns: FileHandlerInterface FileParamHandler \u00b6 getAll \u00b6 public function getAll(): array - Returns: Array of UploadedFile objects. get(string $fileName) \u00b6 public function get(string $fileName): ?UploadedFileInterface - $fileName : Specific file name to retrieve. - Returns: UploadedFileInterface or null . getErrorMessages \u00b6 public function getErrorMessages(): array - Returns: Array of error messages for uploaded files. UploadRegistry \u00b6 __construct \u00b6 public function __construct(array $globalArray) - Processes $_FILES into a registry of UploadedForm objects. getUploadedFile(?string $fieldName = null) \u00b6 public function getUploadedFile(?string $fieldName = null): array - $fieldName : Optional field name filter. - Returns: Array of UploadedFile objects. GlobalFileArraySerializer \u00b6 serialize \u00b6 public static function serialize(array $globalArray): array - Normalizes $_FILES into a dot-notation structure. - Returns: Structured array. UploadedFile \u00b6 getFileName \u00b6 public function getFileName(): string - Returns: Uploaded file\u2019s name. getFieldNameSuffix \u00b6 public function getFieldNameSuffix(): string - Returns: Dot-notation field name (e.g., user.documents ). StreamInputService \u00b6 toArray \u00b6 public function toArray(): array - Parses raw body as JSON. - Returns: Array or throws JsonException .","title":"API Reference"},{"location":"api-reference/#api-reference","text":"","title":"API Reference"},{"location":"api-reference/#request","text":"","title":"Request"},{"location":"api-reference/#__construct","text":"public function __construct(QueryParam $queryParam, FormParam $formParam, ServerParam $cookieParam, FileParam $fileParam, SessionParam $sessionParam, StreamInputService $streamInputService) - Injected with parameter objects and stream service.","title":"__construct"},{"location":"api-reference/#initialize","text":"public static function initialize(): self - Creates a Request with superglobals. - Returns: Request","title":"initialize"},{"location":"api-reference/#getfilestring-filename-null","text":"public function getFile(?string $fileName = null): FileHandlerInterface - $fileName : Optional dot-notation field name (e.g., user.documents ). - Returns: FileHandlerInterface","title":"getFile(?string $fileName = null)"},{"location":"api-reference/#fileparamhandler","text":"","title":"FileParamHandler"},{"location":"api-reference/#getall","text":"public function getAll(): array - Returns: Array of UploadedFile objects.","title":"getAll"},{"location":"api-reference/#getstring-filename","text":"public function get(string $fileName): ?UploadedFileInterface - $fileName : Specific file name to retrieve. - Returns: UploadedFileInterface or null .","title":"get(string $fileName)"},{"location":"api-reference/#geterrormessages","text":"public function getErrorMessages(): array - Returns: Array of error messages for uploaded files.","title":"getErrorMessages"},{"location":"api-reference/#uploadregistry","text":"","title":"UploadRegistry"},{"location":"api-reference/#__construct_1","text":"public function __construct(array $globalArray) - Processes $_FILES into a registry of UploadedForm objects.","title":"__construct"},{"location":"api-reference/#getuploadedfilestring-fieldname-null","text":"public function getUploadedFile(?string $fieldName = null): array - $fieldName : Optional field name filter. - Returns: Array of UploadedFile objects.","title":"getUploadedFile(?string $fieldName = null)"},{"location":"api-reference/#globalfilearrayserializer","text":"","title":"GlobalFileArraySerializer"},{"location":"api-reference/#serialize","text":"public static function serialize(array $globalArray): array - Normalizes $_FILES into a dot-notation structure. - Returns: Structured array.","title":"serialize"},{"location":"api-reference/#uploadedfile","text":"","title":"UploadedFile"},{"location":"api-reference/#getfilename","text":"public function getFileName(): string - Returns: Uploaded file\u2019s name.","title":"getFileName"},{"location":"api-reference/#getfieldnamesuffix","text":"public function getFieldNameSuffix(): string - Returns: Dot-notation field name (e.g., user.documents ).","title":"getFieldNameSuffix"},{"location":"api-reference/#streaminputservice","text":"","title":"StreamInputService"},{"location":"api-reference/#toarray","text":"public function toArray(): array - Parses raw body as JSON. - Returns: Array or throws JsonException .","title":"toArray"},{"location":"architecture/","text":"Architecture \u00b6 Overview \u00b6 Nano\\Http provides a structured, object-oriented approach to HTTP request handling, abstracting superglobals into manageable components. Design Principles \u00b6 Dependency Injection : Request uses constructor injection for parameter objects, enhancing testability. Single Responsibility : Each handler (e.g., FileParamHandler ) manages one superglobal type. Normalization : GlobalFileArraySerializer transforms nested $_FILES into dot-notation keys. Error Handling : Comprehensive file upload validation via FileUploadingRules . Extensibility : Interfaces (e.g., FileHandlerInterface ) enable custom handlers. Structure \u00b6 Handlers : Process specific superglobals (e.g., FileParamHandler ). Param : Wrap raw data (e.g., FileParam ). Services : Manage uploads ( UploadRegistry ) and streams ( StreamInputService ). Serializers : Normalize data ( GlobalFileArraySerializer ). Tests : Validate functionality (e.g., RequestFileHandlerTest ).","title":"Architecture Overview"},{"location":"architecture/#architecture","text":"","title":"Architecture"},{"location":"architecture/#overview","text":"Nano\\Http provides a structured, object-oriented approach to HTTP request handling, abstracting superglobals into manageable components.","title":"Overview"},{"location":"architecture/#design-principles","text":"Dependency Injection : Request uses constructor injection for parameter objects, enhancing testability. Single Responsibility : Each handler (e.g., FileParamHandler ) manages one superglobal type. Normalization : GlobalFileArraySerializer transforms nested $_FILES into dot-notation keys. Error Handling : Comprehensive file upload validation via FileUploadingRules . Extensibility : Interfaces (e.g., FileHandlerInterface ) enable custom handlers.","title":"Design Principles"},{"location":"architecture/#structure","text":"Handlers : Process specific superglobals (e.g., FileParamHandler ). Param : Wrap raw data (e.g., FileParam ). Services : Manage uploads ( UploadRegistry ) and streams ( StreamInputService ). Serializers : Normalize data ( GlobalFileArraySerializer ). Tests : Validate functionality (e.g., RequestFileHandlerTest ).","title":"Structure"},{"location":"changelog/","text":"Changelog \u00b6 v1.0.0 - 2025-03-05 \u00b6 Initial release with request handling, nested file support, and stream input.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v100-2025-03-05","text":"Initial release with request handling, nested file support, and stream input.","title":"v1.0.0 - 2025-03-05"},{"location":"contributing/","text":"Contributing \u00b6 Setup \u00b6 Fork and clone the repository. Install dependencies: composer install Running Tests \u00b6 vendor/bin/phpunit --configuration phpunit.xml Guidelines \u00b6 Adhere to PSR-12 standards. Update docs/ with new features. Include tests in pull requests.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#setup","text":"Fork and clone the repository. Install dependencies: composer install","title":"Setup"},{"location":"contributing/#running-tests","text":"vendor/bin/phpunit --configuration phpunit.xml","title":"Running Tests"},{"location":"contributing/#guidelines","text":"Adhere to PSR-12 standards. Update docs/ with new features. Include tests in pull requests.","title":"Guidelines"},{"location":"installation/","text":"Installation \u00b6 Requirements \u00b6 PHP 8.0+ (uses readonly properties, modern syntax) Composer (recommended) Via Composer \u00b6 Install the package: composer require nano/http Include the autoloader: require 'vendor/autoload.php'; Manual Installation \u00b6 Clone or download the repository. Set up your own autoloader or include files manually. Verification \u00b6 use Nano\\Http\\Request; $request = Request::initialize(); $serverData = $request->getServer()->getAll(); var_dump($serverData);","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"PHP 8.0+ (uses readonly properties, modern syntax) Composer (recommended)","title":"Requirements"},{"location":"installation/#via-composer","text":"Install the package: composer require nano/http Include the autoloader: require 'vendor/autoload.php';","title":"Via Composer"},{"location":"installation/#manual-installation","text":"Clone or download the repository. Set up your own autoloader or include files manually.","title":"Manual Installation"},{"location":"installation/#verification","text":"use Nano\\Http\\Request; $request = Request::initialize(); $serverData = $request->getServer()->getAll(); var_dump($serverData);","title":"Verification"},{"location":"testing/","text":"Testing \u00b6 Running Tests \u00b6 vendor/bin/phpunit --configuration phpunit.xml Test Coverage \u00b6 Handlers : Tests for cookies, files, query, form, server, and session (e.g., RequestFileHandlerTest ). Edge Cases : Nested files, special characters, large data, and errors. Stream Input : JSON parsing and caching ( StreamInputServiceTest ).","title":"Testing"},{"location":"testing/#testing","text":"","title":"Testing"},{"location":"testing/#running-tests","text":"vendor/bin/phpunit --configuration phpunit.xml","title":"Running Tests"},{"location":"testing/#test-coverage","text":"Handlers : Tests for cookies, files, query, form, server, and session (e.g., RequestFileHandlerTest ). Edge Cases : Nested files, special characters, large data, and errors. Stream Input : JSON parsing and caching ( StreamInputServiceTest ).","title":"Test Coverage"},{"location":"usage/","text":"Usage \u00b6 Initialization \u00b6 Create a Request instance with superglobals: use Nano\\Http\\Request; $request = Request::initialize(); Query Parameters \u00b6 Access $_GET data, including nested arrays and special characters: $_GET = ['user' => ['name' => 'Iman'], 'search' => 'query%20with%20spaces']; $request = Request::initialize(); echo $request->getQuery()->get('user')['name']; // \"Iman\" echo $request->getQuery()->get('search'); // \"query with spaces\" Form Data \u00b6 Handle $_POST with arrays and UTF-8: $_POST = ['tags' => ['php', 'zend'], 'message' => '\u3053\u3093\u306b\u3061\u306f']; $request = Request::initialize(); $tags = $request->getForm()->get('tags'); // ['php', 'zend'] echo $request->getForm()->get('message'); // \"\u3053\u3093\u306b\u3061\u306f\" File Uploads \u00b6 Single File \u00b6 $_FILES = ['avatar' => ['name' => 'pic.jpg', 'type' => 'image/jpeg', 'tmp_name' => '/tmp/php123', 'error' => 0, 'size' => 2000, 'full_path' => 'pic.jpg']]; $request = Request::initialize(); $file = $request->getFile('avatar')->getAll()[0]; echo $file->getFileName(); // \"pic.jpg\" Multiple Files \u00b6 $_FILES = ['docs' => ['name' => ['doc1.pdf', 'doc2.pdf'], 'type' => ['application/pdf', 'application/pdf'], 'tmp_name' => ['/tmp/php1', '/tmp/php2'], 'error' => [0, 0], 'size' => [3000, 4000], 'full_path' => ['doc1.pdf', 'doc2.pdf']]]; $request = Request::initialize(); $files = $request->getFile('docs')->getAll(); echo count($files); // 2 Nested Files \u00b6 Access nested files using dot-notation: $_FILES = ['user' => ['name' => ['documents' => ['resume.pdf']], 'type' => ['documents' => ['application/pdf']], 'tmp_name' => ['documents' => ['/tmp/php123']], 'error' => ['documents' => [0]], 'size' => ['documents' => [5000]], 'full_path' => ['documents' => ['resume.pdf']]]]; $request = Request::initialize(); $file = $request->getFile('user.documents')->getAll()[0]; echo $file->getFieldNameSuffix(); // \"user.documents\" echo $file->getFileName(); // \"resume.pdf\" Error Handling \u00b6 $_FILES = ['file' => ['name' => 'large.exe', 'type' => 'application/octet-stream', 'tmp_name' => '/tmp/php123', 'error' => 1, 'size' => 5000000, 'full_path' => 'large.exe']]; $request = Request::initialize(); $errors = $request->getFile('file')->getErrorMessages(); echo $errors[0]; // \"The uploaded file exceeds the upload_max_filesize directive in php.ini.\" Cookies \u00b6 $_COOKIE = ['user_id' => '123', 'is_admin' => 'true']; $request = Request::initialize(); echo $request->getCookie()->get('user_id'); // \"123\" $allCookies = $request->getCookie()->getAll(); // ['user_id' => '123', 'is_admin' => 'true'] Session \u00b6 $_SESSION = ['user_id' => '12345', 'auth' => true]; $request = Request::initialize(); echo $request->getSession()->get('user_id'); // \"12345\" Server Data \u00b6 $_SERVER = ['REQUEST_METHOD' => 'POST', 'HTTPS' => 'on']; $request = Request::initialize(); echo $request->getServer()->get('REQUEST_METHOD'); // \"POST\" Stream Input \u00b6 Process raw request bodies (e.g., JSON): $service = $request->getStreamInput(); $service->toArray(); // e.g., ['name' => 'John'] from '{\"name\": \"John\"}'","title":"Usage Guide"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#initialization","text":"Create a Request instance with superglobals: use Nano\\Http\\Request; $request = Request::initialize();","title":"Initialization"},{"location":"usage/#query-parameters","text":"Access $_GET data, including nested arrays and special characters: $_GET = ['user' => ['name' => 'Iman'], 'search' => 'query%20with%20spaces']; $request = Request::initialize(); echo $request->getQuery()->get('user')['name']; // \"Iman\" echo $request->getQuery()->get('search'); // \"query with spaces\"","title":"Query Parameters"},{"location":"usage/#form-data","text":"Handle $_POST with arrays and UTF-8: $_POST = ['tags' => ['php', 'zend'], 'message' => '\u3053\u3093\u306b\u3061\u306f']; $request = Request::initialize(); $tags = $request->getForm()->get('tags'); // ['php', 'zend'] echo $request->getForm()->get('message'); // \"\u3053\u3093\u306b\u3061\u306f\"","title":"Form Data"},{"location":"usage/#file-uploads","text":"","title":"File Uploads"},{"location":"usage/#single-file","text":"$_FILES = ['avatar' => ['name' => 'pic.jpg', 'type' => 'image/jpeg', 'tmp_name' => '/tmp/php123', 'error' => 0, 'size' => 2000, 'full_path' => 'pic.jpg']]; $request = Request::initialize(); $file = $request->getFile('avatar')->getAll()[0]; echo $file->getFileName(); // \"pic.jpg\"","title":"Single File"},{"location":"usage/#multiple-files","text":"$_FILES = ['docs' => ['name' => ['doc1.pdf', 'doc2.pdf'], 'type' => ['application/pdf', 'application/pdf'], 'tmp_name' => ['/tmp/php1', '/tmp/php2'], 'error' => [0, 0], 'size' => [3000, 4000], 'full_path' => ['doc1.pdf', 'doc2.pdf']]]; $request = Request::initialize(); $files = $request->getFile('docs')->getAll(); echo count($files); // 2","title":"Multiple Files"},{"location":"usage/#nested-files","text":"Access nested files using dot-notation: $_FILES = ['user' => ['name' => ['documents' => ['resume.pdf']], 'type' => ['documents' => ['application/pdf']], 'tmp_name' => ['documents' => ['/tmp/php123']], 'error' => ['documents' => [0]], 'size' => ['documents' => [5000]], 'full_path' => ['documents' => ['resume.pdf']]]]; $request = Request::initialize(); $file = $request->getFile('user.documents')->getAll()[0]; echo $file->getFieldNameSuffix(); // \"user.documents\" echo $file->getFileName(); // \"resume.pdf\"","title":"Nested Files"},{"location":"usage/#error-handling","text":"$_FILES = ['file' => ['name' => 'large.exe', 'type' => 'application/octet-stream', 'tmp_name' => '/tmp/php123', 'error' => 1, 'size' => 5000000, 'full_path' => 'large.exe']]; $request = Request::initialize(); $errors = $request->getFile('file')->getErrorMessages(); echo $errors[0]; // \"The uploaded file exceeds the upload_max_filesize directive in php.ini.\"","title":"Error Handling"},{"location":"usage/#cookies","text":"$_COOKIE = ['user_id' => '123', 'is_admin' => 'true']; $request = Request::initialize(); echo $request->getCookie()->get('user_id'); // \"123\" $allCookies = $request->getCookie()->getAll(); // ['user_id' => '123', 'is_admin' => 'true']","title":"Cookies"},{"location":"usage/#session","text":"$_SESSION = ['user_id' => '12345', 'auth' => true]; $request = Request::initialize(); echo $request->getSession()->get('user_id'); // \"12345\"","title":"Session"},{"location":"usage/#server-data","text":"$_SERVER = ['REQUEST_METHOD' => 'POST', 'HTTPS' => 'on']; $request = Request::initialize(); echo $request->getServer()->get('REQUEST_METHOD'); // \"POST\"","title":"Server Data"},{"location":"usage/#stream-input","text":"Process raw request bodies (e.g., JSON): $service = $request->getStreamInput(); $service->toArray(); // e.g., ['name' => 'John'] from '{\"name\": \"John\"}'","title":"Stream Input"}]}